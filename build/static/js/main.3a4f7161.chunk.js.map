{"version":3,"sources":["components/Ingredient.js","components/IngredientList.js","components/Recipe.js","components/RecipeList.js","components/App.js","reportWebVitals.js","index.js"],"names":["Ingredient","name","amount","IngredientList","ingredientElements","ingredients","map","ingredient","id","className","Recipe","props","cookTime","servings","instructions","RecipeList","recipes","console","log","recipe","tempLoading","App","useState","data","setData","loadData","a","fetch","res","json","useEffect","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uNAEe,SAASA,EAAT,GAAuC,IAAjBC,EAAgB,EAAhBA,KAAMC,EAAU,EAAVA,OACzC,OACE,qCACE,+BAAOD,IACP,+BAAOC,OCHE,SAASC,EAAT,GAA0C,IACjDC,EADgD,EAAfC,YACAC,KAAI,SAAAC,GACzC,OACE,cAACP,EAAD,eAAoCO,GAAnBA,EAAWC,OAIhC,OACE,qBAAKC,UAAU,kBAAf,SACIL,ICTO,SAASM,EAAQC,GAAS,IAErCV,EAKEU,EALFV,KACAW,EAIED,EAJFC,SACAC,EAGEF,EAHFE,SACAC,EAEEH,EAFFG,aACAT,EACEM,EADFN,YAGF,OACE,sBAAKI,UAAU,SAAf,UACE,sBAAKA,UAAU,iBAAf,UACE,oBAAIA,UAAU,gBAAd,SAA+BR,IAC/B,gCACE,wBAAQQ,UAAU,wBAAlB,kBACA,wBAAQA,UAAU,kBAAlB,0BAGJ,sBAAKA,UAAU,cAAf,UACE,sBAAMA,UAAU,gBAAhB,wBACA,sBAAMA,UAAU,gBAAhB,SAAiCG,OAEnC,sBAAKH,UAAU,cAAf,UACE,sBAAMA,UAAU,gBAAhB,uBACA,sBAAMA,UAAU,gBAAhB,SAAiCI,OAEnC,sBAAKJ,UAAU,cAAf,UACE,uBAAMA,UAAU,gBAAhB,0BAA6C,0BAC7C,qBAAKA,UAAU,6DAAf,SAA6EK,OAE/E,sBAAKL,UAAU,cAAf,UACE,uBAAMA,UAAU,gBAAhB,yBAA4C,0BAC5C,qBAAKA,UAAU,gBAAf,SACE,cAACN,EAAD,CAAgBE,YAAaA,SAGjC,0BCpCS,SAASU,EAAT,GAAkC,IAAZC,EAAW,EAAXA,QAGnC,OAFAC,QAAQC,IAAI,cAAc,CAACF,YAGzB,sBAAKP,UAAU,cAAf,UACE,8BACEO,EAAQV,KAAI,SAAAa,GACV,OACE,cAACT,EAAD,eAEMS,GADCA,EAAOX,SAOpB,qBAAKC,UAAU,wCAAf,SACE,wBAAQA,UAAU,mBAAlB,6B,UCTJW,EAAc,CAChB,CACEZ,GAAG,EACHP,KAAM,gBACNY,SAAU,gBACVD,SAAU,gBACVE,aAAc,gBACdT,YAAa,CACX,CACEG,GAAG,EACHP,KAAM,aACNC,OAAQ,OAwBDmB,MAlBf,WAAgB,IAAD,EACWC,mBAASF,GADpB,mBACNG,EADM,KACAC,EADA,KAEPC,EAAQ,uCAAG,8BAAAC,EAAA,sEACGC,MAAM,2HADT,cACTC,EADS,gBAEIA,EAAIC,OAFR,OAETN,EAFS,OAGfC,EAAQD,GAHO,2CAAH,qDAWd,OALAO,qBAAW,WAET,OADAL,IACO,eACN,IAGD,cAACV,EAAD,CAAYC,QAAUO,KC9BXQ,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3a4f7161.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function Ingredient({ name, amount }) {\n  return (\n    <>\n      <span>{name}</span>\n      <span>{amount}</span>\n    </>\n  )\n}\n","import React from 'react'\nimport Ingredient from './Ingredient'\n\nexport default function IngredientList({ ingredients }) {\n  const ingredientElements = ingredients.map(ingredient => {\n    return ( \n      <Ingredient key={ingredient.id} {...ingredient}/>\n    )\n  })\n\n  return (\n    <div className=\"ingredient-grid\">\n      { ingredientElements }\n    </div>\n  )\n}\n","import React from 'react'\nimport IngredientList from './IngredientList'\n\nexport default function Recipe( props ) {\n  const {\n    name, \n    cookTime, \n    servings, \n    instructions,\n    ingredients\n  } = props\n  \n  return (\n    <div className=\"recipe\">\n      <div className=\"recipe__header\">\n        <h3 className=\"recipe__title\">{name}</h3>\n        <div>\n          <button className=\"btn btn--primary mr-1\">Edit</button>\n          <button className=\"btn btn--danger\">Delete</button>\n        </div>\n      </div>\n      <div className=\"recipe__row\">\n        <span className=\"recipe__label\">Cook time:</span>\n        <span className=\"recipe__value\">{cookTime}</span>\n      </div>\n      <div className=\"recipe__row\">\n        <span className=\"recipe__label\">Servings:</span>\n        <span className=\"recipe__value\">{servings}</span>\n      </div>\n      <div className=\"recipe__row\">\n        <span className=\"recipe__label\">Instructions:<br/></span>\n        <div className=\"recipe__value recipe__instructions recipe__value--indented\">{instructions}</div>\n      </div>\n      <div className=\"recipe__row\">\n        <span className=\"recipe__label\">Ingredients:<br/></span>\n        <div className=\"recipe__value\">\n          <IngredientList ingredients={ingredients}/>\n        </div>\n      </div>\n      <br/>\n    </div>\n  )\n}\n\n// style={{display:\"inline\"}","import React from 'react'\nimport Recipe from './Recipe'\n\nexport default function RecipeList({ recipes }) {\n  console.log(\"RecipeList:\",{recipes})\n\n  return (\n    <div className=\"recipe-list\">\n      <div>\n      { recipes.map(recipe => {\n          return ( \n            <Recipe \n              key={recipe.id} \n              {...recipe}\n            /> \n          )\n        })\n      }\n      </div>\n      <div className=\"recipe-list__add-recipe-btn-container\">\n        <button className=\"btn btn--primary\">Add Recipe</button>\n      </div>\n    </div>\n  )\n}\n","import React, { useEffect, useState } from 'react'\nimport RecipeList from './RecipeList';\nimport '../css/app.css'\n\n// Netlify.com\n// https://app.netlify.com/sites/pensive-benz-e9c005/overview\n\n// Github\n// https://github.com/realityexpander/reactcourse\n\n\nlet tempLoading = [\n  {\n    id:1,\n    name: \"Loading…\",\n    servings: \"loading…\",\n    cookTime: \"loading…\",\n    instructions: \"Loading…\", \n    ingredients: [\n      {\n        id:1,\n        name: 'loading...',\n        amount: ''\n      }\n    ]\n  }\n]\n\nfunction App() {\n  const [data, setData] = useState(tempLoading)\n  const loadData = async () => {\n    const res = await fetch(\"http://cors-anywhere.herokuapp.com/https://raw.githubusercontent.com/realityexpander/reactcourse/master/src/sample.json\")\n    const data = await res.json()\n    setData(data)\n  }\n\n  useEffect( () => {\n    loadData()\n    return () => {}\n  }, [])\n\n  return (\n    <RecipeList recipes={ data }/>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}