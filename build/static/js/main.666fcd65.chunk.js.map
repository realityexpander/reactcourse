{"version":3,"sources":["Counter.js","CounterHooks.js","App.js","reportWebVitals.js","index.js"],"names":["Counter","props","state","count","initialCount","ThemeContext","Consumer","style","onClick","changeCount","amount","this","setState","prevState","Component","CounterHooks","useState","setCount","useContext","prevCount","React","createContext","App","theme","setTheme","Provider","value","backgroundColor","prevTheme","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gMAGqBA,E,kDAEnB,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IAEDC,MAAQ,CACXC,MAAOF,EAAMG,cAJC,E,qDAQR,IAAD,OACP,OACE,cAACC,EAAaC,SAAd,UACG,SAAAC,GAAK,OACJ,sBAAKA,MAASA,EAAd,UACA,wBAAQC,QAAS,kBAAI,EAAKC,aAAa,IAAvC,eACA,+BAAO,EAAKP,MAAMC,QAClB,wBAAQK,QAAS,kBAAI,EAAKC,YAAY,IAAtC,uB,kCAOIC,GACVC,KAAKC,UAAS,SAAAC,GACZ,MAAO,CAACV,MAAOU,EAAUV,MAAQO,U,GA1BFI,aCAtB,SAASC,EAAT,GAAuC,IAAhBX,EAAe,EAAfA,aAAe,EACzBY,mBAASZ,GADgB,mBAC5CD,EAD4C,KACrCc,EADqC,KAE7CV,EAAQW,qBAAWb,GACzB,OACE,gCACA,wBAAQE,MAAOA,EAAOC,QAAS,kBAAMS,GAAS,SAAAE,GAAS,OAAIA,EAAY,MAAvE,eACA,+BAAOhB,IACP,wBAAQI,MAAOA,EAAOC,QAAS,kBAAMS,GAAS,SAAAE,GAAS,OAAIA,EAAY,MAAvE,kBCNG,IAAMd,EAAee,IAAMC,gBAkBnBC,MAhBf,WAAgB,IAAD,EACaN,mBAAS,OADtB,mBACNO,EADM,KACCC,EADD,KAEb,OACE,eAACnB,EAAaoB,SAAd,CAAuBC,MAAO,CAACC,gBAAiBJ,GAAhD,oBAEE,cAAC,EAAD,CAASnB,aAAc,IAFzB,eAKE,cAACW,EAAD,CAAcX,aAAc,MAC5B,wBAAQI,QAAS,kBAAMgB,GAAS,SAAAI,GAC9B,MAAqB,QAAdA,EAAsB,QAAU,UADzC,+BCHSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.666fcd65.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { ThemeContext } from './App'\n\nexport default class Counter extends Component {\n  \n  constructor(props){\n    super(props)\n\n    this.state = {\n      count: props.initialCount\n    }\n  }\n\n  render() {\n    return (\n      <ThemeContext.Consumer>\n        {style => (\n          <div style = {style}>\n          <button onClick={()=>this.changeCount(-1)}>-</button>\n          <span>{this.state.count}</span>\n          <button onClick={()=>this.changeCount(+1)}>+</button>\n          </div>\n        )}\n      </ThemeContext.Consumer>\n    )\n  }\n\n  changeCount(amount){\n    this.setState(prevState => { // relies on previous state\n      return {count: prevState.count + amount}\n    })\n    // this.setState( {count: 0}) // does not rely on previous state\n  } \n}","import React, { useState, useContext } from 'react'\nimport { ThemeContext } from './App'\n\nexport default function CounterHooks({initialCount}) {\n  const [count, setCount] = useState(initialCount) // must always be first statement at top of fn\n  const style = useContext(ThemeContext)\n  return (\n    <div>\n    <button style={style} onClick={() => setCount(prevCount => prevCount - 1)}>-</button>\n    <span>{count}</span>\n    <button style={style} onClick={() => setCount(prevCount => prevCount + 1)}>+</button>\n  </div>\n  )\n}","import React, { useState } from 'react'\nimport Counter from './Counter'\nimport CounterHooks from './CounterHooks'\n\nexport const ThemeContext = React.createContext() // like global variable\n\nfunction App() {\n  const [theme, setTheme] = useState('red')\n  return (\n    <ThemeContext.Provider value={{backgroundColor: theme}}>\n      Counter\n      <Counter initialCount={4} />\n\n      CounterHooks\n      <CounterHooks initialCount={500} />\n      <button onClick={() => setTheme(prevTheme => {\n        return prevTheme === 'red' ? 'white' : 'red'\n      })}>Change Theme </button>\n    </ThemeContext.Provider>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}